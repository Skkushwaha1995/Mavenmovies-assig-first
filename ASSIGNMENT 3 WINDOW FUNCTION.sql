USE MAVENMOVIES;

-- 1. **Rank the customers based on the total amount they've spent on rentals.**

SELECT
    C.CUSTOMER_ID, CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME,
    SUM(P.AMOUNT) AS TotalAmountSpent,
    RANK() OVER (ORDER BY SUM(P.AMOUNT) DESC) AS CustomerRank
FROM
    PAYMENT P
JOIN
	CUSTOMER C ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY
    CUSTOMER_ID
ORDER BY
    TotalAmountSpent DESC;

-- 2. **Calculate the cumulative revenue generated by each film over time.**

# USING THE WINDOW FUNCTION

SELECT F.FILM_ID, F.TITLE AS FILM_NAME, P.AMOUNT,P.PAYMENT_DATE,
SUM(P.AMOUNT) OVER (PARTITION BY F.FILM_ID ORDER BY P.PAYMENT_DATE) AS CUMULATIVE_REVENUE
FROM 
	FILM F
JOIN
	INVENTORY I ON F.FILM_ID = I.FILM_ID # CONNECT INVENTORY TABLE TO FILM TABLE
JOIN
    RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID # CONNECT RENTALE TABLE TO INVENTORY TABLE
JOIN    
    PAYMENT P ON R.RENTAL_ID = P.RENTAL_ID # CONNECT PAYMENT TABLE TO RENNTAL TABLE
ORDER BY
	P.PAYMENT_ID, F.FILM_ID;
    
-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**

SELECT 
    F.FILM_ID,
    F.TITLE AS FILM_TITLE,
    F.RENTAL_DURATION,
    ROUND(AVG(DATEDIFF(RETURN_DATE,RENTAL_DATE)), 2) AS AVG_RENTAL_DURATION
FROM 
    FILM F
JOIN 
    INVENTORY I ON F.FILM_ID = I.FILM_ID
JOIN 
    RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
GROUP BY 
    F.FILM_ID, F.TITLE, F.RENTAL_DURATION
ORDER BY 
    F.RENTAL_DURATION, F.FILM_ID;

-- 4. **Identify the top 3 films in each category based on their rental counts.**

SELECT 
    C.NAME AS CATEGORY_NAME,
    F.TITLE AS FILM_TITLE,
    COUNT(R.RENTAL_ID) AS RENTAL_COUNT
FROM 
CATEGORY C 
JOIN
    FILM_CATEGORY FC ON C.CATEGORY_ID = FC.CATEGORY_ID
JOIN 
    FILM F ON FC.FILM_ID = F.FILM_ID
LEFT JOIN 
    INVENTORY I ON F.FILM_ID = I.FILM_ID
LEFT JOIN 
    RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
GROUP BY 
    C.CATEGORY_ID, F.FILM_ID
HAVING 
    RENTAL_COUNT > 0
ORDER BY 
    C.NAME, RENTAL_COUNT DESC
LIMIT 3;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**

SELECT 
    C.CUSTOMER_ID,
    CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME,
    COUNT(R.RENTAL_ID) AS TOTAL_RENTALS,
    ROUND(COUNT(R.RENTAL_ID) - AVG(COUNT(R.RENTAL_ID)) OVER (),2) AS RENTAL_COUNT_DIFFERENCE -- ROUND FUNCTION IS USED FOR VALUE RETURN ONLY 2 DECIMAL PLACE
FROM 
    CUSTOMER C
LEFT JOIN 
    RENTAL R ON C.CUSTOMER_ID = R.CUSTOMER_ID
GROUP BY 
    C.CUSTOMER_ID, CUSTOMER_NAME
ORDER BY 
    RENTAL_COUNT_DIFFERENCE DESC;

-- 6. *Find the monthly revenue trend for the entire rental store over time.*
    
SELECT 
	DISTINCT
    DATE_FORMAT(P.PAYMENT_DATE, '%Y-%M') AS PAYMENT_MONTH,
    SUM(P.AMOUNT) OVER (PARTITION BY DATE_FORMAT(P.PAYMENT_DATE, '%Y-%M')) AS MONTHLY_REVENUE
FROM 
    PAYMENT P
ORDER BY 
	PAYMENT_MONTH;

-- 7. *Identify the customers whose total spending on rentals falls within the top 20% of all customers.*

SELECT 
    CUSTOMER_ID,
	CONCAT(FIRST_NAME, ' ', LAST_NAME) AS CUSTOMER_NAME,
    TOTAL_AMOUNT_SPENT
FROM (
    SELECT 
        C.CUSTOMER_ID,
        C.FIRST_NAME,
        C.LAST_NAME,
        SUM(P.AMOUNT) AS TOTAL_AMOUNT_SPENT,
        PERCENT_RANK() OVER (ORDER BY SUM(P.AMOUNT) DESC) AS PCT_RANK
    FROM 
        CUSTOMER C
    JOIN 
        PAYMENT P ON C.CUSTOMER_ID = P.CUSTOMER_ID
    GROUP BY 
        C.CUSTOMER_ID
) RANKED_CUSTOMER
WHERE 
    PCT_RANK <= 0.2
ORDER BY 
    TOTAL_AMOUNT_SPENT DESC;

-- 8. *Calculate the running total of rentals per category, ordered by rental count.* 

SELECT 
    C.NAME AS CATEGORY_NAME,
    F.TITLE AS FILM_TITLE,
    COUNT(R.RENTAL_ID) AS RENTAL_COUNT,
    SUM(COUNT(R.RENTAL_ID)) OVER (PARTITION BY C.NAME ORDER BY COUNT(R.RENTAL_ID) DESC) AS RUNNING_TOTAL_RENTALS
FROM 
    CATEGORY C
JOIN 
    FILM_CATEGORY FC ON C.CATEGORY_ID = FC.CATEGORY_ID
JOIN 
    FILM F ON FC.FILM_ID = F.FILM_ID
LEFT JOIN 
    INVENTORY I ON F.FILM_ID = I.FILM_ID
LEFT JOIN 
    RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
GROUP BY 
    C.CATEGORY_ID, F.FILM_ID
ORDER BY 
    RENTAL_COUNT DESC;

-- 9. *Find the films that have been rented less than the average rental count for their respective categories.*

SELECT 
    FILM_TITLE,
    CATEGORY_NAME,
    RENTAL_COUNT,
    AVG_CATEGORY_RENTAL_COUNT
FROM (
    SELECT 
        F.TITLE AS FILM_TITLE,
        C.NAME AS CATEGORY_NAME,
        COUNT(R.RENTAL_ID) AS RENTAL_COUNT,
        AVG(COUNT(R.RENTAL_ID)) OVER (PARTITION BY C.CATEGORY_ID) AS AVG_CATEGORY_RENTAL_COUNT
    FROM 
        FILM F
    JOIN 
        FILM_CATEGORY FC ON F.FILM_ID = FC.FILM_ID
    JOIN 
        CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID
    LEFT JOIN 
        INVENTORY I ON F.FILM_ID = I.FILM_ID
    LEFT JOIN 
        RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
    GROUP BY 
        F.FILM_ID, C.CATEGORY_ID, F.TITLE, C.NAME
) SUBQUERY
WHERE 
    RENTAL_COUNT < AVG_CATEGORY_RENTAL_COUNT
ORDER BY 
    CATEGORY_NAME, RENTAL_COUNT;

-- 10)*Identify the top 5 months with the highest revenue and display the revenue generated in each month.*

SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%M') AS payment_month,
    SUM(p.amount) AS total_revenue
FROM 
    payment p
GROUP BY 
    DATE_FORMAT(p.payment_date, '%Y-%M')
ORDER BY 
    total_revenue DESC
LIMIT 5;


-- COMPLETE THIS ASSIGNMNET AND THANK YOU

